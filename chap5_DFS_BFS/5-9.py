'''
date: 2023.09.05/2023.09.09
name: Yejin
title: BFS 
'''
# BFS는 큐 자료구조 이용 --> 인접한 노드를 반복적으로 큐에 넣도록 하면 자연스럽게 FIFO --> 가까운 노드부터 탐색
# 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
# 2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입 후 방문 처리
# 3. 2를 계속 반복

'''
특정 조건에서의 최단 경로 문제를 해결하기 위한 목적으로도 효과적으로 사용될 수 있음
--> 각 간선의 비용이 동일한 경우에서 최단 경로 문제를 해결하기 위한 목적으로도 사용됨

'''
from collections import deque

# BFS 메서드 정의
def bfs(start):
    # Queue 구현을 위해 deque 라이브러리 이용
    queue = deque([start])
    # 현재 노드를 방문 처리
    visited[start] = True
    
    # 큐가 빌 때까지 반복
    while queue:
        # 큐에서 하나의 원소를 뽑아서 출력
        v = queue.popleft()
        print(v, end=' ')
        # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i]=True

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의된 BFS 함수 호출
bfs(1)
'''
탐색순서: 시작 노드 1로부터 거리가 1인 노드 --> 거리가 2인 노드 --> 거리가 3인 노드
'''