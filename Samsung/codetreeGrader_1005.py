'''
2023.10.05
<부족한 점>
- 자료구조인 우선순위 큐를 어떻게 정의할지 모르니 문제 풀이 진행이 막힘
- 파이썬으로 우선순위 큐 라이브러리 활용법 보기
'''

# 사실 문제가 어려운 것은 없음. 왜냐면 시뮬레이션인 만큼 문제에서 주어진 것들만 잘 구현해내면 됨
# 문제는 자료구조의 정의를 어떻게 하느냐의 것임
## task를 저장할 우선순위 큐, 채점기들(채점 진행O/X, 어떤 채점을 진행중인지?)
## task는 1) 우선순위 2) url(도메인/문제번호) 3) 큐에 들어온 시간 -> 이 세 가지를 가지고 있어야 함

## 채점이 끝난 애들 저장할 리스트(시작시간, 끝난 시간)
## -> 링크드 리스트로 저장해야 하는가?



# t: t초, p: 우선순위 u: url, J_id: J_id번 채점기

# 1) 채점기 준비
def prepare():
    num, N, url = list(input().split()) # num: 명령어 구분자, N: 채점기 수, url: 문제 url(도메인/문제ID)
    grader = [0 for _ in range(N)] # 코드트리 채점기, 0이면 채점 진행중X, 1이면 채점 진행 중
    # 우선순위 큐에다가 [url with 우선순위 1] 집어넣어야 함


# 2) 채점 요청
def input_grade(t, p, u):
    # t초에 우선수위가 p이고 url인 u에 대한 문제 채점 요청

    # 채점 대기큐에 있는 task 중 정확히 u와 일치하는 url이 단 하나라도 존재하는지 확인
    # 있다면 pass

    # 없다면 큐에 추가

# 3) 채점 시도
def try_grade(t):
    # 1. 대기큐에서 우선순위가 가장 높은 채점 task 고르기
    ## 1-1) p가 가장 작은 것

    ## 1-2) 여러개라면 큐에 들어온 시간이 더 빠른 것


    # 2. 그 task가 현재 채점이 될 수 있는지 확인
    ## 2-1) 현재 채점을 진행중인 도메인 중 하나인지 확인

    ## 2-2) 채점이 끝난 애들 리스트 보고, 현재 task의 도메인과 정확히 일치하는 도메인에 대해 확인하는데
    ##      가장 최근에 진행된 채점 시작 시간 start, 종료 시간 start_gap/ 현재 시간 t가 < start + 3 * gap이면 채점 불가


    # 3. 채점이 될 수 있다면
    ## 3-1) 쉬고 있는 채점기 중 가장 번호가 작은 채점기 선택해서 시작

    ## 3-2) 만약 쉬고 있는 채점기가 없다면 요청 무시


# 4) 채점 종료
def finish_grade(t,J_id):
    # t초에 J_id번 채점기가 진행하던 채점 종료
    # 만약 J_id가 진행하던 채점이 없다면 continue


    # 채점 끝난 task 모아놓는 list에다가 시작시간, 종료 시간 gap 계산해서 넣기

    

# 5) 채점 대기 큐 조회
def print_count(t):
    # 현재 시간 t에 채점 대기큐에 있는 채점 task 수를 출력

Q = int(input()) # Q: 명령어의 수(<50,000)
for i in range(Q): # Q개의 명령어에 대해서 시뮬레이션 시작
    if i == 0: # 맨 처음은 무조건 코드트리 채점기 준비 단계
        prepare()
        continue

    cmd_s = list(input().split())
    num = int(cmd_s[0]) # 어떤 명령어인지 구분하기 위해 첫번째 숫자 따로 담기
    
    if num == 200: # 채점 요청
        t, p, u = cmd_s[1], cmd_s[2], cmd_s[3] # t초, p 우선순위, u url문제
        input_grade(t, p, u) 
    elif num == 300: # 채점 시도
        t = cmd_s[1] # t초
        try_grade(t)
    elif num == 400: # 채점 종료
        t, J_id = cmd_s[1], cmd_s[2] # t초, J_id 채점기가 진행하던 채점 종료
        finish_grade(t,J_id)
    else: # 채점 대기 큐 조회
        t = cmd_s[1] # t초
        print_count(t)